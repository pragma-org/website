---
// Copyright 2024 PRAGMA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { getCollection } from 'astro:content';

import Layout from '../layouts/base.astro';

import Pattern from '../components/Pattern.astro';
import ExternalLink from '../components/ExternalLink.astro';
import Hero from '../components/Hero.astro';

import { socials, email } from '../config.json';

const questions = await Promise.all(
  (await getCollection('questions')).map(async (q) => {
    return { title: q.data.title, ...(await q.render()) };
  }),
);

const discordUrl = `https://discord.gg/${socials.discord}`;
const twitterUrl = `https://twitter.com/${socials.twitter}`;
---

<Layout title="FAQ" description="Simplicity, transparency and efficiency.">
  <main>
    <Hero
      tag="FAQ"
      title="Simplicity, transparency and efficiency."
      id="hero"
    />
    <aside>
      <Pattern
        actives={new Set([
          2, 3, 4, 5, 8, 9, 14, 15, 16, 17, 18, 19, 22, 23, 26, 27, 28, 29,
        ])}
      />
      <div>
        <h3>Have more questions?</h3>
        <p>
          Feel free to reach out!
          <ul class="flex-col">
            <li>
              <svg class="icon"><use xlink:href="#at-sign"></use></svg
              ><ExternalLink href=`mailto:${email}`>Email</ExternalLink>
            </li>
            <li>
              <svg class="icon"><use xlink:href="#discord"></use></svg
              ><ExternalLink href={discordUrl}>Discord</ExternalLink>
            </li>
            <li>
              <svg class="icon"><use xlink:href="#twitter"></use></svg
              ><ExternalLink href={twitterUrl}>Twitter/X</ExternalLink>
            </li>
          </ul>
        </p>
      </div>
    </aside>
    <section id="questions">
      <h2>FAQ</h2>
      {
        questions.map(({ title, Content }) => (
          <details>
            <summary>
              {title}
              <svg class="icon arrow">
                <use xlink:href="#arrow-up" />
              </svg>
            </summary>
            <Content />
          </details>
        ))
      }
    </section>
  </main>
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol
      id="arrow-up"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round">
      <line x1="12" y1="19" x2="12" y2="5"></line>
      <polyline points="5 12 12 5 19 12"></polyline>
    </symbol>
  </svg>
</Layout>

<style>
  main {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: auto;
    grid-template-areas:
      'h1 h1 h1 h1'
      'gr gr gr gr'
      'aside q q q';
  }

  #hero {
    grid-area: h1;
  }

  #hero + :global(div#grid) {
    grid-area: gr;
  }

  aside {
    grid-area: aside;
    min-width: 20rem;
    padding: var(--gap-md);
    margin-top: var(--gap-lg);

    & > :global(svg) {
      color: var(--color-secondary);
      display: flex;
      margin: 0 auto var(--gap-md) auto;
      max-width: 75%;
    }

    & h3 {
      font-family: var(--font-mono);
      color: var(--color-secondary);
    }

    & ul {
      list-style: none;
      margin: var(--gap-xs) 0;
      color: var(--color-secondary);

      & > :global(li) {
        & > .icon {
          margin-right: var(--gap-xs);
        }
        margin-bottom: calc(var(--gap-xs) / 2);
      }

      & > :global(li) + :global(li) {
        margin-top: calc(var(--gap-xs) / 2);
      }

      & > :global(li):last-child {
        margin-bottom: unset;
      }
    }
  }

  #questions {
    grid-area: q;
    width: 100%;
    padding: var(--gap-md);
    margin-top: var(--gap-lg);

    & > details {
      border-bottom: 1px solid var(--color-secondary);
      padding: var(--gap-md) 0;

      & > :global(p) {
        padding-top: var(--gap-md);
      }

      & summary {
        width: 100%;
        list-style: none;
        cursor: pointer;
        color: var(--color-secondary);
        display: flex;
        gap: var(--gap-sm);
        align-items: center;

        &:hover {
          color: var(--color-secondary-light);
        }

        & svg {
          flex: 1 0 auto;
          margin-left: auto;
          transition: 0.3s ease;
        }

        &:focus {
          outline: none;
        }

        &::-webkit-details-marker {
          display: none;
        }
      }

      &:nth-child(2) {
        border-top: 1px solid var(--color-secondary);
      }

      &[open] {
        & summary svg.arrow {
          transform: rotate(180deg);
        }
      }
    }
  }

  @media screen and (max-width: 770px) {
    main {
      grid-template-areas:
        'h1      h1    h1    h1'
        'q       q     q     q'
        'aside aside aside aside';
    }

    aside {
      display: flex;
      flex-direction: row-reverse;
      justify-content: center;
      align-items: center;
      gap: var(--gap-md);

      & > div {
        display: flex;
        flex-direction: column;
        text-align: left;
      }

      & > :global(svg) {
        max-width: 25vw;
        margin: 0;
      }
    }
  }
</style>
