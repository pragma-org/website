---
import { Markdown } from '@astropub/md'

import { getCollection, getEntry } from 'astro:content';

import Layout from '../layouts/base.astro';

import Card from '../components/Card.astro';
import Grid from '../components/Grid.astro';
import Pattern from '../components/Pattern.astro';
import Section from '../components/Section.astro';

const home = await getEntry('home', 'home');
const members = await getCollection('members');
const projects = await getCollection('projects');
---

<Layout
  description={home.data.heroText}>
  <main>
    <section class="flex-row flex-center" id="hero">
      <noscript>
        <svg id="pragma" style="position: absolute; z-index: 1;">
          <use xlink:href="#logo-typography"></use>
        </svg>
      </noscript>
      <p>
        {home.data.heroText}
      </p>
    </section>

    <Grid rows={2} actives={new Set([3, 4, 10, 13, 19, 20, 25, 30])} />

    <Section
      tag="Projects"
      title={home.data.projectsTitle}
      id="projects">
      <div class="flex-row flex-center" id="cards">
        {
          projects.map((project) => (
            <Card
              title={project.data.name}
              href={`/projects/${project.data.name.toLowerCase()}`}>
              {project.data.summary}
            </Card>
          ))
        }
      </div>
    </Section>

    <Section
      tag="Who we are"
      title={home.data.whoWeAreTitle}
      id="who-we-are">
      <div class="flex-row">
        <div id="members">
          {
            members.map(({ data: { name, logo } }) => (
              <img alt={name} src={logo} loading="lazy" />
            ))
          }
        </div>
        <p>
          <Markdown.Inline of={home.data.whoWeAreText} />

          <a href="/about" class="more">
            Learn about PRAGMA<svg class="icon slide"
              ><use xlink:href="#arrow-right"></use></svg
            >
          </a>
        </p>
      </div>

      <section id="principles">
        {home.data.principles.map(principle => {
          return (
            <div>
              <Pattern actives={new Set(principle.pattern.map(active => Number(active)))} />
              <span>{principle.text}</span>
            </div>
          );
        })}
      </section>
    </Section>

    <Section
      tag="Contribute"
      title={home.data.contributeTitle}
      id="contribute">
      <div class="justified">
        <Markdown.Inline of={home.data.contributeText} />
      </div>
    </Section>

    <script>
      (function withScroll() {
        let throttle: boolean;

        const svg = document.createElementNS(
          'http://www.w3.org/2000/svg',
          'svg',
        );
        const link = document.createElementNS(
          'http://www.w3.org/2000/svg',
          'use',
        );
        link.setAttributeNS(
          'http://www.w3.org/1999/xlink',
          'xlink:href',
          '#logo-typography',
        );
        svg.id = 'pragma';
        svg.appendChild(link);

        const href = document.createElement('a');
        href.setAttribute('href', '/');
        href.setAttribute('aria-label', 'homepage');
        href.appendChild(svg);

        const maxY = document.body.scrollHeight;

        function ease(y) {
          const r = Math.max(0, Math.min(1, (10 * y) / maxY));
          return 100 * Math.sin((r * Math.PI) / 2);
        }

        document.addEventListener('DOMContentLoaded', () => {
          let pos = window.scrollY;

          const setProgress = () => {
            throttle = false;
            const progress = ease(pos);
            svg.setAttribute('data-progress', progress.toString());
            svg.style.setProperty('--progress', progress.toString());
          };

          if (!window.location.hash || pos != 0) {
            setProgress();
          }

          document.querySelector('#hero').appendChild(href);

          document.addEventListener('scroll', () => {
            pos = window.scrollY;
            if (!throttle) {
              requestAnimationFrame(setProgress);
            }
            throttle = true;
          });
        });
      })();
    </script>
  </main>
</Layout>

<style>
  section {
    padding: var(--gap-md);

    & :global(.tag) {
      margin-top: var(--gap-lg);
    }
  }

  #hero {
    width: 100%;
    aspect-ratio: 16/9;
    max-height: 40rem;
    justify-content: end;

    & :global(#pragma) {
      --progress: 0;
      color: var(--color-secondary-light);
      cursor: default;

      aspect-ratio: 6/1;
      position: fixed;
      z-index: 100;

      width: calc(10rem + (100 - var(--progress)) * 0.5%);
      top: calc(21.7rem - var(--progress) * 0.19rem);
      left: calc(0.75rem + var(--progress) * 0.05rem);

      &[data-progress='100'] {
        color: var(--color-secondary);
        cursor: pointer;
      }
    }

    & > p {
      max-width: 17.5rem;
      text-align: right;
    }
  }

  #projects > #cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--gap-md);
    max-width: 70vw;
  }

  @media (max-width: 770px) {
    #projects > #cards {
      grid-template-columns: 1fr;
      max-width: 100%;
    }
  }


  #who-we-are {
    & p {
      max-width: 30vw;
      min-width: 20rem;
      margin-top: var(--gap-md);
      margin-left: auto;
      padding: 0 var(--gap-md);
    }

    & a {
      font-variant: small-caps;
      margin-top: var(--gap-md);
      float: right;
    }

    & a:hover {
      text-decoration: none;
    }
  }

  #members {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    grid-template-rows: 3rem;
    justify-items: center;
    align-items: center;
    padding: var(--gap-md) var(--gap-lg);
    gap: var(--gap-md);

    & > img {
      grid-column-end: span 2;
      object-fit: contain;
      width: 100%;
      max-height: 100%;
      display: inline-block;
      filter: grayscale(95%);
      opacity: 0.8;
    }

    & > img:nth-child(4) {
      grid-column-start: 2;
    }
  }

  #principles {
    margin-top: var(--gap-md);
    width: 100%;
    display: flex;
    justify-content: center;
    color: var(--color-secondary);
    gap: var(--gap-lg);

    & > * {
      display: flex;
      flex-direction: column;
      align-items: center;
      max-width: 15vw;
    }

    & :global(svg) {
      min-height: 10vw;
      height: 10vw;
    }

    & span {
      display: flex;
      text-align: center;
      margin-top: var(--gap-sm);
      padding-top: var(--gap-sm);
      border-top: 1px solid var(--color-secondary);
    }
  }

  #contribute {
    & > div {
      white-space: pre-wrap;
      max-width: 30vw;
    }
  }

  @media (max-width: 1000px) {
    section {
      padding: var(--gap-md);

      & :global(.tag) {
        margin-top: var(--gap-md);
      }
    }

    #hero {
      height: 50vh;

      & p {
        text-align: center;
        max-width: unset;
        margin-top: auto;
        margin-bottom: var(--gap-md);
      }

      & :global(#pragma) {
        width: calc(160px + (100 - var(--progress)) * 0.5%);
        top: calc(43px + (10 - var(--progress) / 10) * 2.5%);
        left: calc(0.75rem + var(--progress) * 0.05rem);
      }
    }

    #projects > #cards {
      max-width: unset;
    }

    #who-we-are .flex-row {
      #members {
        grid-template-columns: repeat(4, 1fr);
        grid-template-rows: auto;

        & > img {
          grid-column-end: span 2;
        }

        & > img:nth-child(4) {
          grid-column-start: unset;
        }

        & > img:nth-child(5) {
          grid-column-start: 2;
        }
      }
    }

    #contribute {
      & > p {
        max-width: unset;
      }
    }
  }

  @media (max-width: 770px) {
    section {
      padding: var(--gap-sm);

      & :global(.tag) {
        margin-top: var(--gap-md);
      }
    }

    :global(#hamburger):checked ~ main #hero :global(#pragma) {
      --progress: 100 !important;
      color: var(--color-primary);
    }

    #projects > #cards {
      flex-direction: column;
      max-width: 25rem;
    }

    #who-we-are .flex-row {
      flex-direction: column;

      & p {
        margin-left: unset;
        max-width: unset;
        min-width: unset;
      }

      #members {
        grid-template-columns: auto;
        grid-template-rows: repeat(5, 3rem);
        gap: var(--gap-md);

        & > img {
          grid-column-end: unset;
        }

        & > img:nth-child(5) {
          grid-column-start: unset;
        }
      }
    }

    #principles {
      display: none;
    }
  }
</style>
