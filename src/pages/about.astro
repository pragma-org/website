---
import { Markdown } from '@astropub/md'

import Layout from '../layouts/base.astro';

import Hero from '../components/Hero.astro';
import Section from '../components/Section.astro';
import Pattern from '../components/Pattern.astro';
import Grid from '../components/Grid.astro';
import { getEntry } from 'astro:content';

const about = await getEntry('about', 'about');
---

<Layout title="About" description="">
  <main class="flex-col">
    <Hero
      tag="About us"
      title={about.data.heroText}
      id="hero"
    />

    <Section
      tag="Who we are"
      title={about.data.whoWeAreTitle}
      id="who-we-are">
      <p class="justified">
        <Markdown.Inline of={about.data.whoWeAreText} />
      </p>
      {about.data.whoWeAreParagraph.map((paragraph, index) => {
        return (
          <div class={`flex-row flex-center decorated ${index % 2 === 0 ? 'right' : 'left'}`}>
            {index % 2 !== 0 && <Pattern
              actives={new Set(paragraph.pattern.map(active => Number(active)))}
            />}
            <p class="justified">
              <span class="highlight">{paragraph.title}</span>
              <Markdown.Inline of={paragraph.text} />
            </p>
            {index % 2 === 0 && <Pattern
              actives={new Set(paragraph.pattern.map(active => Number(active)))}
            />}
          </div>
        );
      })}
    </Section>

    <Section tag="Our goals" id="our-goals">
      <ul>
        {about.data.goals.map(goal => {
          return (
            <li data-title={goal.title} class="justified">
              <Markdown.Inline of={goal.text} />
            </li>
          );
        })}
      </ul>
    </Section>

    <Section
      tag="Our principles"
      title={about.data.principlesTitle}
      id="our-principles">
      <p class="justified">
        <Markdown.Inline of={about.data.principlesFirstParagraph} />
      </p>
      <p class="justified">
        <span class="highlight">
          <Markdown.Inline of={about.data.principlesHighlightedParagraph} />
        </span>
        <Markdown.Inline of={about.data.principlesSecondParagraph} />
      </p>
    </Section>

    <Grid rows={0.25} actives={new Set([1, 2, 5, 6])} />

    <Section tag="We will..." title="" id="we-will">
      <ul class="list-icon" data-icon="check-square">
        {about.data.weWill.items.map(item => {
          return (
            <li>
              <Markdown.Inline of={item.text} />
              {item.sub_items && (
                <ul class="list-icon" data-icon="check-square">
                  {item.sub_items.map(subItem => {
                    return (
                      <li>
                        <Markdown.Inline of={subItem.text} />
                      </li>
                    );
                  })}
                </ul>
              )}
            </li>
          );
        })}
      </ul>
    </Section>

    <Section tag="We will NOT..." title="" id="we-will-not">
      <ul class="list-icon" data-icon="x-square">
        {about.data.weWillNot.items.map(item => {
          return (
            <li>
              <Markdown.Inline of={item.text} />
              {item.sub_items && (
                <ul class="list-icon" data-icon="check-square">
                  {item.sub_items.map(subItem => {
                    return (
                      <li>
                        <Markdown.Inline of={subItem.text} />
                      </li>
                    );
                  })}
                </ul>
              )}
            </li>
          );
        })}
      </ul>
      <p class="justified">
        <Markdown.Inline of={about.data.promisesParagraph} />
      </p>
    </Section>

    <Grid rows={0.25} actives={new Set([0, 3, 4, 7])} />

    <Section
      tag="Structure"
      title={about.data.structureTitle}
      id="structure">
      <div class="justified">
        <Markdown.Inline of={about.data.structureFirstParagraph} />
      </div>
      <img src="/img/pragma/structure.svg" alt="PRAGMA's structure" />
      <div class="justified">
        <Markdown.Inline of={about.data.structureSecondParagraph} />
      </div>
      <img
        src="/img/pragma/maintainer-committee.svg"
        alt="PRAGMA's structure"
      />
    </Section>
  </main>
</Layout>
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  <symbol
    id="check-square"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <polyline points="9 11 12 14 22 4"></polyline>
    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
  </symbol>
</svg>

<style>
  main :global(section) {
    margin: auto auto;
    max-width: 60rem;

    & > * {
      width: 100%;
    }

    & .decorated {
      width: 100%;
      max-width: 50rem;
      margin: var(--gap-md) 0;
      gap: var(--gap-xl);

      & p {
        flex: 1 1 0;
      }

      & :global(svg) {
        flex: 1 1 0;
        width: 100%;
        height: 100%;
        max-width: 10rem;
        color: var(--color-secondary);
      }
    }

    & .decorated.left {
      margin-right: auto;
    }

    & .decorated.right {
      margin-left: auto;
    }
  }

  .highlight {
    color: var(--color-secondary);
    font-size: 1.5em;
    line-height: 1.25em;
    display: block;
    text-align: center;
    margin-bottom: var(--gap-md);
  }

  #our-goals {
    padding: var(--gap-md) var(--gap-xl);
    flex-direction: row;
    align-items: flex-start;
    width: 100%;

    & > :global(span) {
      flex: 1 1 0;
    }

    & > :global(ul) {
      flex: 2 2 0;
    }

    & > ul {
      list-style: none;

      & > li {
        padding-top: 1em;
        margin-bottom: var(--gap-md);
        position: relative;
        max-width: 30rem;
        white-space: pre-wrap;
      }

      & > li:before {
        content: '';
        width: 100%;
        height: 1px;
        position: relative;
        top: -1em;
        background: var(--color-secondary);
        display: inline-block;
      }

      & > li:after {
        background: var(--color-primary);
        color: var(--color-secondary);
        content: attr(data-title);
        display: inline-block;
        height: 1em;
        padding-right: var(--gap-xs);
        position: absolute;
        z-index: 2;
        top: 0.25em;
        left: 0;
      }
    }
  }

  #our-principles {
    & > p + p {
      margin-top: var(--gap-md);
    }

    & .highlight {
      padding: 0 var(--gap-md);
    }
  }

  #structure {
    width: 100%;

    & img {
      display: block;
      width: 100%;
      max-width: 50rem;
      margin: var(--gap-md) auto;
    }

    & div {
      white-space: pre-wrap;
      margin-top: var(--gap-sm);
    }
  }

  #we-will-not {
    & p {
      margin-top: var(--gap-md);
    }
  }

  ul.list-icon {
    width: unset !important;
    list-style: none;
    margin: 0 auto;

    & > li {
      padding-left: 1.5em;
      position: relative;
      margin: var(--gap-xs) 0;
      max-width: 30rem;
    }

    & > li::before {
      content: '';
      width: 1em;
      max-width: 1em;
      height: 1em;
      max-height: 1em;
      position: absolute;
      left: 0;
      top: 0.2em;
      display: inline-block;
      background: var(--color-secondary);
      -webkit-mask-image: var(--mask);
      mask-image: var(--mask);
    }

    &[data-icon='check-square'] > li::before {
      --mask: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path></svg>');
    }

    &[data-icon='x-square'] > li::before {
      background: var(--color-accent);
      --mask: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-square"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line></svg>');
    }
  }

  @media screen and (max-width: 770px) {
    main :global(section) {
      max-width: unset;

      & .decorated {
        max-width: unset;
        gap: var(--gap-md);

        & :global(svg) {
          flex: 0 0 auto;
          height: 10rem;
          width: 10rem;
        }
      }

      & .flex-row {
        flex-direction: column;
      }

      & .decorated.left {
        margin-left: auto;
      }

      & .decorated.right {
        margin-right: auto;
        flex-direction: column-reverse;
      }
    }

    #our-goals {
      align-items: center;
      flex-direction: column;
      padding: var(--gap-md);
    }

    #our-principles {
      & .highlight {
        padding: 0;
      }
    }
  }
</style>
