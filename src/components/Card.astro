---
interface Props {
  title: string;
  href: string;
}

import { createHash } from 'crypto';

const { title } = Astro.props;

const digest = createHash('sha256').update(title).digest('hex');

const pixels = Array.from(digest).map((digit) => {
  const n = parseInt(digit, 16);
  return { x: n >> 1 % 5, y: n % 3 };
});
---

<article class="flex-col">
  <div class="pixel" data-x={pixels[0].x} data-y="0"></div>
  <div class="pixel" data-x={pixels[1].x} data-y="0"></div>
  <div class="pixel" data-x={pixels[2].x} data-y="0"></div>
  <h3>{title}</h3>
  <p class="justified"><slot /></p>
  <a class="no-effect" href="{href}" aria-label={title}></a>
  <span class="more">
    Read more <svg class="icon slide"><use xlink:href="#arrow-right"></use></svg
    >
  </span>
  <div class="pixel" data-invert-y data-x={pixels[2].x} data-y={pixels[2].y}>
  </div>
  <div class="pixel" data-invert-y data-x={pixels[3].x} data-y={pixels[3].y}>
  </div>
  <div class="pixel" data-invert-y data-x={pixels[4].x} data-y={pixels[4].y}>
  </div>
  <div class="pixel" data-invert-y data-x={pixels[5].x} data-y={pixels[5].y}>
  </div>
  <div class="pixel" data-invert-y data-x={pixels[6].x} data-y={pixels[6].y}>
  </div>
</article>

<style>
  article {
    flex: 1 1 0;
    background: var(--color-primary-dark);
    padding: var(--gap-lg);
    min-height: calc(max(28rem, min(55vh, 55vw)));
    position: relative;
  }

  .pixel {
    --pixel-size: calc(max(100vw, 100vh) / 28);
    --x: 0;
    --y: 0;

    position: absolute;
    width: var(--pixel-size);
    height: var(--pixel-size);
    top: calc(var(--pixel-size) * var(--y));
    left: calc(var(--pixel-size) * var(--x));
    background: var(--color-primary-dark);
    transition: all 0.1s ease-in-out;

    &[data-invert-y] {
      top: unset;
      bottom: calc(var(--pixel-size) * var(--y));
    }

    &[data-x='1'] {
      --x: 1;
    }
    &[data-x='2'] {
      --x: 2;
    }
    &[data-x='3'] {
      --x: 3;
    }
    &[data-x='4'] {
      --x: 4;
    }
    &[data-y='1'] {
      --y: 1;
    }
    &[data-y='2'] {
      --y: 2;
    }
  }

  article:focus,
  article:hover {
    & .pixel {
      background: var(--color-secondary);
    }
  }

  h3 {
    font-family: var(--font-secondary);
    color: var(--color-secondary);
    margin-bottom: var(--gap-md);
    font-size: 1.5em;
    font-weight: 300;
  }

  span.more {
    display: inline-block;
    color: var(--color-secondary);
    font-family: var(--font-mono);
    font-variant: small-caps;
    margin-top: auto;
    text-decoration: none;
    text-align: right;
    position: relative;

    & > svg.icon.slide {
      position: absolute;
      top: 0.1em;
      right: 0;
      opacity: 0;
      transition: all 100ms ease-in;
    }
  }

  a {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;

    &:focus,
    &:hover {
      border: 1px solid var(--color-secondary);
      text-decoration: none;

      & ~ span > svg.icon.slide {
        right: -1.5em;
        opacity: 1;
      }
    }
  }
</style>
