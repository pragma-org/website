---
interface Prop {
  actives?: Set<Number>,
  rows: Number,
}

import Pictogram from './Pictogram.astro';

const perPictogram = 8*4;
const perRow = 7;

let { actives, rows } = Astro.props;

if (!actives) {
  actives = new Set([...Array(perPictogram*rows).keys()].map(i => {
    return Math.random() < 0.25 ? i : null;
  }).filter(x => x !== null));
}
---

<div id="grid">
  {[...Array(parseInt(rows, 10)).keys()].map(_ => [...Array(perRow).keys()].map(_ =>
    (<Pictogram actives={actives} />)
  ))}
</div>

<style define:vars={{ perRow }}>
  #grid {
    display: grid;
    grid-template-columns: repeat(var(--perRow), 1fr);
    color: var(--color-secondary);

    & :global(svg) {
      width: calc(100vw / var(--perRow));
      height: calc(100vw / var(--perRow));
      aspect-ratio: 1/1;
    }
  }
</style>
