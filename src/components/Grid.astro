---
// Copyright 2024 PRAGMA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Pattern from './Pattern.astro';

interface Props {
  actives?: Set<number>;
  rows: number;
  style?: string;
}

let { actives, rows, style } = Astro.props;

const nCol = 7;
const nRow = rows;

if (!actives) {
  actives = new Set(
    [...Array(32).keys()]
      .map((i) => {
        return Math.random() < 0.25 ? i : null;
      })
      .filter((x) => x !== null),
  );
}
---

<div id="grid" style={style || ''}>
  <Pattern actives={actives} nCol={nCol} nRow={nRow} />
</div>

<style define:vars={{ nCol, nRow }}>
  #grid {
    display: grid;
    width: 100%;
    color: var(--color-secondary);
    overflow-x: hidden;

    & :global(svg) {
      width: 100vw;
    }
  }

  @media (max-width: 770px) {
    #grid :global(svg) {
      width: calc(10 * 100vw / var(--nCol));
    }
  }

  @media (max-width: 500px) {
    #grid :global(svg) {
      width: calc(14 * 100vw / var(--nCol));
    }
  }
</style>
